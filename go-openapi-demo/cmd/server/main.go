// cmd/server/main.go
package main

import (
	"log"
	"net/http"

	"github.com/go-chi/chi/v5"
	oapimw "github.com/oapi-codegen/nethttp-middleware"

	"go-openapi-demo/api"
	"go-openapi-demo/internal/handlers"
)

func main() {
	// GetSwagger is generated by oapi-codegen when 'spec' is enabled in the config.
	// It returns the parsed OpenAPI document for use by the validator middleware.
	swagger, err := api.GetSwagger()
	if err != nil {
		log.Fatalf("load spec: %v", err)
	}
	// Remove server URLs so the validator doesn't enforce a specific base URL in local dev.
	swagger.Servers = nil

	// Create a Chi router (lightweight idiomatic HTTP router).
	r := chi.NewRouter()

	// Add request validation middleware: every incoming request must match the OpenAPI spec
	// (paths, params, headers, and JSON schema for bodies).
	r.Use(oapimw.OapiRequestValidator(swagger))

	// Wire generated routes to our implementation.
	// - oapi-codegen generated the routing function (HandlerFromMux)
	// - our ItemsService implements the non-strict server interface methods.
	svc := handlers.NewItemsService()
	api.HandlerFromMux(svc, r)

	// Start the HTTP server.
	log.Println("listening on :8080")
	log.Fatal(http.ListenAndServe(":8080", r))
}
